1. What is a hash table?

A: type of data structure that stores each value by linking it to a key, forming key-value pairs, just like JavaScript objects.

2. What is hashing?

A:  Hashing is the conversion from a string to a numerical index. 

3. How does a hash table store data?

A:The hash table stores data by taking the key, converting it into a hash code, then modding the output of the hashing function with its capacity, and then it stores the value in an array index.


4. How are hash tables and objects different?

A: Object’s are really more of a two-dimensional construct in that you have a object with multiple, fixed properties and values for those properties.  Hashtables are more one-dimensional having only a “key” and a “value”.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

A list of pets and their unique names.

A: Object

The name, age, and the birthday of your best friend.

A: Object

The name and location of every company in a given city.

A: Object

All of the books checked out from a library by a particular individual.

A: Hash Table

The primary and secondary phone numbers for a contact.

A: Hash Table

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

A:
var hash = (string, max) => {
  var hash = 0;
  for (var i =0; i <= string.length; i++){
    hash += string.charAt(i);
}
return hash % max;
};

let HashTable = function() {
  let storage = [];
  const storageLimit = 80;

  this.print = function() {
    console.log(storage);
  };

  this.add = function(phone, name, customerAddress){
    var index = hash(phone, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [ [phone, name, customerAddress]
      ];
    } else {
      var input = false;
      for (var i =0; i < storage[index].length; i++) {
        if (storage[index][i][0] === phone) {
          storage[index][i][1] = name;
          storage[index][i][2] = customerAddress;
          input = true;
      }
    }
    if (input === false){
      storage[index].push([phone, name, customerAddress]);
    }
  }
};

this.remove = function(phone) {
  var index = hash(phone, storageLimit);
  if (storage[index].length === 1 && storage[index][0][0] === phone) {
    delete storage[index];
  } else {
    for (var i = 0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        delete storage[index][i];
      }
    }
  }
};

this.lookup = function(phone) {
  var index = hash(phone, storageLimit);
  if (storage[index] === undefined){
    return undefined;
  } else {
    for (var i =0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        var profile = {name:storage[index][i][1], customerAddress:storage[index][i][2]}; // add 2 indexes into 1
        return profile;
      }
    }
  }
};
};
var customers = new HashTable();
customers.add(68738565, 'Diana', '1234 Road');
console.log(customers.lookup(12345678));

7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

A:
var hash = function (string, max) {
  var hash = 0;
  for (var i = 0; i <string.length; i++){
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

var HashTable = function(){
  var storage = [];
  var storageLimit = 40;
  
  this.add = function(key, value){
    var index = hash(key, storageLimit);
    
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var input = false;
      
      for(var i = 0; i < storage[index].length; i++) {
        if(storage[index][i][0] === key) {
          storage[index][i][1] = value;
          input = true;
        }
      }
      
      if (input === false){
        storage[index].push([key, value]);
      }
    }
  };
  
  this.findItem = function(key) {
    var index = hash(key, storageLimit);
    
    if(storage[index] === undefined) {
      console.log("Not Found item");
    } else {
      for (var i = 0; i < storage[index].length; i ++) {
        if (storage[index][i][0] === key) {
          console.log(storage[index][i][1]);
        }
      }
    }
  };
  
  this.showInventory = function(){
    console.log(storage);
  };
  
};

var storeItem = new HashTable();
storeItem.add(39, 'books');
console.log(storeItem.findItem(39));


8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

A:
class HashTable {
	constructor() {
		this.storage = [];
		this.storageLimit = 30;
	}

	add(key, value) {
		const obj = {};
		obj[key] = value;

		if (!this.isLimitExceeded()) {
			this.storage.push(obj);
		} else {
			return;
		}
	}

	lookup(key) {
		for (let i = 0; i < this.storage.length; i++) {
			return this.storage[i][key];
		}
	}

	lookupPublisher(value) {
		for (let i = 0; i < this.storage.length; i++) {
			const key = Object.keys(this.storage[i])[0];
			if (this.storage[i][key] === value) {
				return key;
			}
		}
	}

	isLimitExceeded() {
		return this.storage.length >= this.storageLimit;
	}
}

var articleTable = new HashTable();
articleTable.add('2018', 'Times');
articleTable.add('2018', 'USA Today');
articleTable.add('2017', 'Journal');
articleTable.add('2015', 'Atlanta Journal');


console.log(articleTable.storage);
console.log(articleTable.lookup('2018'));
console.log(articleTable.lookupPublisher('Times'));
articleTable.lookup('2018');
articleTable.lookupPublisher('Times');
